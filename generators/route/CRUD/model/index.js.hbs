import modelEnhance from '{{linkImport}}../../../utils/modelEnhance';
import PageHelper from '{{linkImport}}../../../utils/pageHelper';
import { routerLinks } from "{{linkImport}}../../constant";

/**
* true when the page is first loaded
* Can use this value to prevent switching pages when
* Initialize data multiple times
*/
let LOADED = false;
export default modelEnhance({
  namespace: '{{lowerCase name }}',

  state: {
    pageData: PageHelper.create(),
    employees: []
  },

  subscriptions: {
    setup({ dispatch, history }) {
      history.listen(({ pathname }) => {
        if (pathname === routerLinks['{{properCase name }}'] && !LOADED) {
          LOADED = true;
          dispatch({
            type: 'init'
          });
        }
      });
    }
  },

  effects: {
    // Enter page load
    *init({ payload }, { put, select }) {
      const { pageData } = yield select(state => state.{{lowerCase name }});
      yield put({
        type: 'getPageInfo',
        payload: {
          pageData: pageData.startPage(1, 10)
        }
      });
    },
    // Get paging data
    *getPageInfo({ payload }, { put }) {
      const { pageData } = payload;
      yield put({
        type: '@request',
        payload: {
          valueField: 'pageData',
          url: '{{ api_0 }}',
          pageInfo: pageData
        }
      });
    },
    // Save after querying paging
    *save({ payload }, { put, select }) {
      const { values, success } = payload;
      const { pageData } = yield select(state => state.{{lowerCase name }});
      yield put({
        type: '@request',
        payload: {
          notice: true,
          url: '{{ api_1 }}',
          data: values
        }
      });
      yield put({
        type: 'getPageInfo',
        payload: { pageData }
      });
      success();
    },
    // Modify
    // *update({ payload }, { call, put }) {},
    // Delete after querying paging
    *remove({ payload }, { put, select }) {
      const { records, success } = payload;
      const { pageData } = yield select(state => state.{{lowerCase name }});
      yield put({
        type: '@request',
        payload: {
          notice: true,
          url: '{{ api_2 }}',
          data: records.map(item => item.rowKey)
        }
      });
      yield put({
        type: 'getPageInfo',
        payload: { pageData }
      });
      success();
    },
    // Get employee list
    *getEmployees({ payload }, { put }) {
      yield put({
        type: '@request',
        afterResponse: resp => resp.data,
        payload: {
          valueField: 'employees',
          url: '{{ api_3 }}'
        }
      });
    }
  },

  reducers: {}
});
